# Generated by Django 3.0.3 on 2020-03-04 21:17

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid
import waves.core.compat
import waves.core.utils.logged
import waves.core.utils.storage
import waves.core.utils.validators
import waves.models.base


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('label', models.CharField(help_text='Input displayed label', max_length=100, verbose_name='Label')),
                ('name', models.CharField(help_text="Input runner's job param command line name", max_length=50, verbose_name='Parameter name')),
                ('multiple', models.BooleanField(default=False, help_text='Can hold multiple values', verbose_name='Multiple')),
                ('help_text', models.TextField(blank=True, null=True, verbose_name='Help Text')),
                ('required', models.NullBooleanField(choices=[(None, 'Not submitted by user'), (True, 'Required'), (False, 'Optional')], default=True, help_text='Submitted and/or Required', verbose_name='Required')),
                ('default', models.CharField(blank=True, max_length=50, null=True, verbose_name='Default value')),
                ('cmd_format', models.IntegerField(choices=[(0, '-- Not used in job command line--'), (6, 'Assigned named parameter: [name]=value'), (2, 'Named short parameter: -[name] value'), (1, 'Named assigned long parameter: --[name]=value'), (3, 'Named short option: -[name]'), (5, 'Named long option: --[name]'), (4, 'Positional parameter: value')], default=2, help_text='Command line pattern', verbose_name='Command line format')),
                ('edam_formats', models.CharField(blank=True, help_text='comma separated list of supported edam format', max_length=255, null=True, verbose_name='Edam format(s)')),
                ('edam_datas', models.CharField(blank=True, help_text='comma separated list of supported edam data param_type', max_length=255, null=True, verbose_name='Edam data(s)')),
                ('when_value', models.CharField(blank=True, help_text='Input is treated only for this parent value', max_length=255, null=True, verbose_name='When value')),
                ('regexp', models.CharField(blank=True, max_length=255, null=True, verbose_name='Validation Regexp')),
                ('parent', models.ForeignKey(blank=True, help_text='Input is associated to', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dependents_inputs', to='waves.AParam')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_waves.aparam_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Input',
                'verbose_name_plural': 'Inputs',
                'db_table': 'wcore_aparam',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='FileInputSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, null=True, verbose_name='Input Label')),
                ('help_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Help text')),
                ('file', models.FileField(storage=waves.core.utils.storage.WavesStorage(), upload_to=waves.core.utils.storage.file_sample_directory, verbose_name='Sample file')),
            ],
            options={
                'verbose_name': 'Input sample',
                'verbose_name_plural': 'Input samples',
                'db_table': 'wcore_fileinputsample',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp', verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp', verbose_name='Last Update')),
                ('slug', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True, verbose_name='Job title')),
                ('_status', models.IntegerField(choices=[(-1, 'Undefined'), (0, 'Created'), (1, 'Prepared'), (2, 'Queued'), (3, 'Running'), (4, 'Suspended'), (5, 'Run completed, pending data retrieval'), (6, 'Results data retrieved'), (7, 'Cancelled'), (8, 'Warnings'), (9, 'Error')], default=0, verbose_name='Job status')),
                ('status_mail', models.IntegerField(default=9999, editable=False)),
                ('email_to', models.EmailField(blank=True, help_text='Notify results to this email', max_length=254, null=True, verbose_name='Email results')),
                ('exit_code', models.IntegerField(default=0, help_text='Job exit code on relative adapter', verbose_name='Job system exit code')),
                ('results_available', models.BooleanField(default=False, editable=False, verbose_name='Results are available')),
                ('nb_retry', models.IntegerField(default=0, editable=False, verbose_name='Nb Retry')),
                ('remote_job_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Remote job ID')),
                ('remote_history_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Remote history ID')),
                ('_command_line', models.CharField(editable=False, max_length=255, null=True, verbose_name='Final generated command line')),
                ('_adaptor', models.TextField(editable=False, null=True, verbose_name='Adapter classed used for this Job')),
                ('service', models.CharField(default='', editable=False, max_length=255, null=True, verbose_name='Service name')),
                ('notify', models.BooleanField(default=False, editable=False, verbose_name='Notify this result')),
                ('client', models.ForeignKey(blank=True, help_text='Associated registered user', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='clients_job', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'db_table': 'wcore_job',
                'ordering': ['-updated', '-created'],
                'abstract': False,
            },
            bases=(models.Model, waves.models.base.UrlMixin, waves.core.utils.logged.LoggerClass),
        ),
        migrations.CreateModel(
            name='Runner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', waves.core.compat.RichTextField(blank=True, help_text='Description (HTML)', null=True, verbose_name='Description')),
                ('short_description', models.TextField(blank=True, help_text='Short description (Text)', null=True, verbose_name='Short Description')),
                ('clazz', models.CharField(choices=[('', 'Select an adaptor...'), ('Cluster', [('waves.core.adaptors.saga.cluster.LocalClusterAdaptor', 'Local cluster'), ('waves.core.adaptors.saga.cluster.SshClusterAdaptor', 'Cluster over SSH (user/pass)'), ('waves.core.adaptors.saga.cluster.SshKeyClusterAdaptor', 'Cluster over SSH (key)')]), ('Shell', [('waves.core.adaptors.saga.shell.LocalShellAdaptor', 'Local script'), ('waves.core.adaptors.saga.shell.SshKeyShellAdaptor', 'Shell script over SSH (private key)'), ('waves.core.adaptors.saga.shell.SshShellAdaptor', 'Shell script over SSH (user/pass)')])], help_text='This is the concrete class used to perform job execution', max_length=100, null=True, verbose_name='Adapter object')),
                ('name', models.CharField(help_text='Displayed name', max_length=50, verbose_name='Label')),
                ('enabled', models.BooleanField(blank=True, default=True, help_text='Runner enabled to run jobs', verbose_name='Enabled')),
            ],
            options={
                'verbose_name': 'Computing infrastructure',
                'verbose_name_plural': 'Computing infrastructures',
                'db_table': 'wcore_runner',
                'ordering': ['name'],
            },
            bases=(waves.models.base.ExportAbleMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp', verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp', verbose_name='Last Update')),
                ('description', waves.core.compat.RichTextField(blank=True, help_text='Description (HTML)', null=True, verbose_name='Description')),
                ('short_description', models.TextField(blank=True, help_text='Short description (Text)', null=True, verbose_name='Short Description')),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('name', models.CharField(help_text='Service displayed name', max_length=255, verbose_name='Service name')),
                ('authors', models.CharField(help_text='Tools authors', max_length=255, null=True, verbose_name='Authors')),
                ('citations', models.CharField(help_text='Citation link (Bibtex format)', max_length=500, null=True, verbose_name='Citation link')),
                ('version', models.CharField(blank=True, default='1.0', help_text='Service displayed version', max_length=10, null=True, verbose_name='Current version')),
                ('status', models.IntegerField(choices=[[0, 'Draft (only creator)'], [1, 'Staff (Team members)'], [4, 'Registered'], [2, 'Restricted'], [3, 'Public']], default=0, help_text='Service online status')),
                ('email_on', models.BooleanField(default=True, help_text='This service sends notification email', verbose_name='Notify results')),
                ('partial', models.BooleanField(default=False, help_text='Set whether some service outputs are dynamic (not known in advance)', verbose_name='Dynamic outputs')),
                ('remote_service_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Remote service tool ID')),
                ('edam_topics', models.TextField(blank=True, help_text='Comma separated list of Edam ontology topics', null=True, verbose_name='Edam topics')),
                ('edam_operations', models.TextField(blank=True, help_text='Comma separated list of Edam ontology operations', null=True, verbose_name='Edam operations')),
                ('_runner', models.ForeignKey(db_column='runner_id', help_text='Service job runs configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waves_service_runs', to='waves.Runner', verbose_name='Computing infrastructure')),
            ],
            options={
                'verbose_name': 'Waves Service',
                'verbose_name_plural': 'Waves Services',
                'db_table': 'wcore_service',
                'ordering': ['name'],
            },
            bases=(waves.models.base.ExportAbleMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ServiceBinaryFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp', verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp', verbose_name='Last Update')),
                ('slug', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, unique=True)),
                ('label', models.CharField(max_length=255, verbose_name='Binary file label')),
                ('binary', models.FileField(storage=waves.core.utils.storage.BinaryStorage(), upload_to=waves.core.utils.storage.binary_directory, verbose_name='Binary file')),
            ],
            options={
                'verbose_name': 'Binary file',
                'verbose_name_plural': 'Binaries files',
                'db_table': 'wcore_servicebinaryfile',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp', verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp', verbose_name='Last Update')),
                ('order', models.PositiveIntegerField(default=0)),
                ('slug', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, unique=True)),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('availability', models.IntegerField(choices=[(0, 'Disabled API'), (1, 'Enabled API')], default=1, verbose_name='Availability')),
                ('name', models.CharField(max_length=255, verbose_name='Label')),
                ('_runner', models.ForeignKey(db_column='runner_id', help_text='Service job runs configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='waves_submission_runs', to='waves.Runner', verbose_name='Computing infrastructure')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='waves.Service')),
            ],
            options={
                'verbose_name': 'Submission method',
                'verbose_name_plural': 'Submission methods',
                'db_table': 'wcore_submission',
                'ordering': ('order',),
                'unique_together': {('service', 'api_name')},
            },
        ),
        migrations.CreateModel(
            name='BooleanParam',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('true_value', models.CharField(default='True', max_length=50, verbose_name='True value')),
                ('false_value', models.CharField(default='False', max_length=50, verbose_name='False value')),
            ],
            options={
                'verbose_name': 'Boolean choice',
                'verbose_name_plural': 'Boolean choices',
                'db_table': 'wcore_booleanparam',
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='DecimalParam',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('min_val', models.DecimalField(blank=True, decimal_places=3, default=None, help_text='Leave blank if no min', max_digits=50, null=True, verbose_name='Min value')),
                ('max_val', models.DecimalField(blank=True, decimal_places=3, default=None, help_text='Leave blank if no max', max_digits=50, null=True, verbose_name='Max value')),
                ('step', models.DecimalField(blank=True, decimal_places=3, default=0.5, max_digits=50, verbose_name='Step')),
            ],
            options={
                'verbose_name': 'Decimal',
                'verbose_name_plural': 'Decimal',
                'db_table': 'wcore_decimalparam',
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='FileInput',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('max_size', models.BigIntegerField(default=20480.0, help_text='in Ko', verbose_name='Allowed file size ')),
                ('allowed_extensions', models.CharField(default='*', help_text='Comma separated list, * means no filter', max_length=255, validators=[waves.core.utils.validators.validate_list_comma], verbose_name='Filter by extensions')),
                ('allow_copy_paste', models.BooleanField(default=False, help_text='Set whether file input field should add a copy/paste text field', verbose_name='Allow copy paste in forms')),
            ],
            options={
                'verbose_name': 'File input',
                'verbose_name_plural': 'Files inputs',
                'db_table': 'wcore_fileinput',
                'ordering': ['order'],
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='IntegerParam',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('min_val', models.IntegerField(blank=True, default=0, help_text='Leave blank if no min', null=True, verbose_name='Min value')),
                ('max_val', models.IntegerField(blank=True, default=None, help_text='Leave blank if no max', null=True, verbose_name='Max value')),
                ('step', models.IntegerField(blank=True, default=1, help_text='Step to increment/decrement values', verbose_name='Step')),
            ],
            options={
                'verbose_name': 'Integer',
                'verbose_name_plural': 'Integer',
                'db_table': 'wcore_integerparam',
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='ListParam',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('list_mode', models.CharField(choices=[('select', 'Select List'), ('radio', 'Radio buttons'), ('checkbox', 'Check box')], default='select', max_length=100, verbose_name='List display mode')),
                ('list_elements', models.TextField(help_text='One Element per line label|value', validators=[waves.core.utils.validators.validate_list_param], verbose_name='Elements')),
            ],
            options={
                'verbose_name': 'List',
                'verbose_name_plural': 'Lists',
                'db_table': 'wcore_listparam',
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='TextParam',
            fields=[
                ('aparam_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='waves.AParam')),
                ('max_length', models.CharField(default=255, max_length=255, verbose_name='Max length (<255)')),
            ],
            options={
                'verbose_name': 'Text Input',
                'verbose_name_plural': 'Text Input',
                'db_table': 'wcore_textparam',
            },
            bases=('waves.aparam',),
        ),
        migrations.CreateModel(
            name='SubmissionOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Creation timestamp', verbose_name='Created on')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Last update timestamp', verbose_name='Last Update')),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('label', models.CharField(help_text='Label', max_length=255, null=True, verbose_name='Label')),
                ('name', models.CharField(blank=True, help_text='Output name', max_length=255, null=True, verbose_name='Name')),
                ('file_pattern', models.CharField(help_text='Pattern is used to match input value (%s to retrieve value from input)', max_length=100, verbose_name='File name or name pattern')),
                ('edam_format', models.CharField(blank=True, help_text='Edam ontology output format', max_length=255, null=True, verbose_name='Edam format')),
                ('edam_data', models.CharField(blank=True, help_text='Edam ontology output data', max_length=255, null=True, verbose_name='Edam data')),
                ('help_text', models.TextField(blank=True, null=True, verbose_name='Help Text')),
                ('extension', models.CharField(blank=True, default='', help_text='Used on WEB for display/download ', max_length=15, verbose_name='File extension (internal)')),
                ('from_input', models.ForeignKey(blank=True, default=None, help_text='Is valuated from an input', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='to_outputs', to='waves.AParam')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='waves.Submission')),
            ],
            options={
                'verbose_name': 'Expected output',
                'verbose_name_plural': 'Expected outputs',
                'db_table': 'wcore_submissionoutput',
                'ordering': ['-created'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='binary_file',
            field=models.ForeignKey(blank=True, help_text="If set, 'Execution parameter' param line:'command' will be ignored", null=True, on_delete=django.db.models.deletion.SET_NULL, to='waves.ServiceBinaryFile'),
        ),
        migrations.AddField(
            model_name='service',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='service',
            name='restricted_client',
            field=models.ManyToManyField(blank=True, help_text="Public access is granted to everyone, If status is 'Restricted' you may restrict access to specific users here.", related_name='waves_service_restricted_services', to=settings.AUTH_USER_MODEL, verbose_name='Restricted clients'),
        ),
        migrations.CreateModel(
            name='SampleDepParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_default', models.CharField(max_length=200, verbose_name='Set value to ')),
                ('related_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_samples', to='waves.AParam')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependent_inputs', to='waves.FileInputSample')),
                ('file_input', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sample_dependencies', to='waves.FileInput')),
            ],
            options={
                'verbose_name': 'Sample dependency',
                'verbose_name_plural': 'Sample dependencies',
                'db_table': 'wcore_sampledepparam',
            },
        ),
        migrations.CreateModel(
            name='RepeatedGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=50, verbose_name='Group name')),
                ('title', models.CharField(max_length=200, verbose_name='Group title')),
                ('max_repeat', models.IntegerField(blank=True, null=True, verbose_name='Max repeat')),
                ('min_repeat', models.IntegerField(default=0, verbose_name='Min repeat')),
                ('default', models.IntegerField(default=0, verbose_name='Default repeat')),
                ('submission', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submission_groups', to='waves.Submission')),
            ],
            options={
                'verbose_name': 'Repeated input',
                'verbose_name_plural': 'Repeated inputs',
                'db_table': 'wcore_repeatedgroup',
            },
        ),
        migrations.CreateModel(
            name='JobHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='History timestamp', verbose_name='Date time')),
                ('status', models.IntegerField(choices=[(-1, 'Undefined'), (0, 'Created'), (1, 'Prepared'), (2, 'Queued'), (3, 'Running'), (4, 'Suspended'), (5, 'Run completed, pending data retrieval'), (6, 'Results data retrieved'), (7, 'Cancelled'), (8, 'Warnings'), (9, 'Error')], help_text='History job status', null=True, verbose_name='Job Status')),
                ('message', models.TextField(blank=True, help_text='History log', null=True, verbose_name='History log')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin Message')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_history', to='waves.Job')),
            ],
            options={
                'db_table': 'wcore_jobhistory',
                'ordering': ['-timestamp', '-status'],
                'unique_together': {('job', 'timestamp', 'status', 'is_admin')},
            },
        ),
        migrations.AddField(
            model_name='job',
            name='submission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_jobs', to='waves.Submission'),
        ),
        migrations.AddField(
            model_name='fileinputsample',
            name='dependent_params',
            field=models.ManyToManyField(blank=True, through='waves.SampleDepParam', to='waves.AParam'),
        ),
        migrations.AddField(
            model_name='aparam',
            name='repeat_group',
            field=models.ForeignKey(blank=True, help_text='Group and repeat items', null=True, on_delete=django.db.models.deletion.SET_NULL, to='waves.RepeatedGroup'),
        ),
        migrations.AddField(
            model_name='aparam',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inputs', to='waves.Submission'),
        ),
        migrations.CreateModel(
            name='AdaptorInitParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Param name', max_length=100, null=True, verbose_name='Name')),
                ('value', models.CharField(blank=True, help_text='Default value', max_length=500, null=True, verbose_name='Value')),
                ('crypt', models.BooleanField(default=False, editable=False, verbose_name='Encrypted')),
                ('prevent_override', models.BooleanField(default=False, help_text='Prevent override', verbose_name='Prevent override')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Initial param',
                'verbose_name_plural': 'Initial params',
                'db_table': 'wcore_adaptorinitparam',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='JobAdminHistory',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('waves.jobhistory',),
        ),
        migrations.CreateModel(
            name='ServiceRunParam',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('waves.adaptorinitparam',),
        ),
        migrations.CreateModel(
            name='SubmissionRunParam',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('waves.adaptorinitparam',),
        ),
        migrations.CreateModel(
            name='SubmissionExitCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exit_code', models.IntegerField(default=0, verbose_name='Exit code value')),
                ('message', models.CharField(max_length=255, verbose_name='Exit code message')),
                ('is_error', models.BooleanField(default=False, verbose_name='Is an Error')),
                ('submission', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exit_codes', to='waves.Submission')),
            ],
            options={
                'verbose_name': 'Exit Code',
                'db_table': 'wcore_submissionexitcode',
                'unique_together': {('exit_code', 'submission')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='service',
            unique_together={('api_name', 'version', 'status'), ('api_name', 'version')},
        ),
        migrations.CreateModel(
            name='JobOutput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('slug', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, unique=True)),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('value', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Output value')),
                ('remote_output_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Remote output ID (on adapter)')),
                ('_name', models.CharField(help_text='Output displayed name', max_length=50, verbose_name='Name')),
                ('extension', models.CharField(default='', max_length=5, verbose_name='File extension')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='waves.Job')),
            ],
            options={
                'db_table': 'wcore_joboutput',
                'unique_together': {('api_name', 'job')},
            },
            bases=(waves.models.base.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='JobInput',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('slug', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, unique=True)),
                ('api_name', models.CharField(blank=True, help_text='App short code, used in url, leave blank for automatic setup', max_length=100, null=True, verbose_name='App short code')),
                ('value', models.CharField(blank=True, help_text='Input value (filename, boolean value, int value etc.)', max_length=255, null=True, verbose_name='Input content')),
                ('remote_input_id', models.CharField(editable=False, max_length=255, null=True, verbose_name='Remote input ID (on adapter)')),
                ('param_type', models.CharField(choices=[('file', 'Input file'), ('list', 'List of values'), ('boolean', 'Boolean'), ('decimal', 'Decimal'), ('int', 'Integer'), ('text', 'Text')], editable=False, max_length=50, null=True, verbose_name='Param param_type')),
                ('name', models.CharField(editable=False, max_length=50, null=True, verbose_name='Param name')),
                ('cmd_format', models.IntegerField(choices=[(0, '-- Not used in job command line--'), (6, 'Assigned named parameter: [name]=value'), (2, 'Named short parameter: -[name] value'), (1, 'Named assigned long parameter: --[name]=value'), (3, 'Named short option: -[name]'), (5, 'Named long option: --[name]'), (4, 'Positional parameter: value')], default=4, editable=False, null=True, verbose_name='Parameter Type')),
                ('label', models.CharField(editable=False, max_length=100, null=True, verbose_name='Label')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='job_inputs', to='waves.Job')),
            ],
            options={
                'db_table': 'wcore_jobinput',
                'unique_together': {('name', 'value', 'job')},
            },
            bases=(models.Model, waves.models.base.UrlMixin),
        ),
        migrations.AddField(
            model_name='fileinputsample',
            name='file_input',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='input_samples', to='waves.FileInput'),
        ),
    ]
